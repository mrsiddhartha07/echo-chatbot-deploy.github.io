{"version":3,"sources":["actionsCreator.js","components/loginPage/loginPage.js","constants.js","components/chatWindow/chatWindow.js","components/welcomePage/welcomePage.js","Routes.js","serviceWorker.js","reducers/handleChatReducers.js","reducers/addUserReducer.js","reducers/index.js","index.js"],"names":["actionCreator","type","payload","LoginPage","state","username","password","submitFormHandler","event","preventDefault","props","triggerLogin","history","push","inputChangeHandler","target","name","setState","value","className","method","onSubmit","this","placeholder","required","onChange","React","Component","connect","dispatch","actionsCreator","ChatWindow","chat","onMessage","e","addMessage","chatBot","data","onOpen","connectedWebSocket","changeChatHandler","submitChatHandler","currentUser","websocket","send","WebSocket","onopen","evt","onclose","onClose","onmessage","onerror","onError","window","scrollTo","document","body","scrollHeight","documentElement","back","connected","error","usersChat","map","singleChat","index","data-username","key","onClick","backToLogin","handleChat","addUser","disconnectedWebSocket","Welcome","Routes","store","exact","path","component","WelcomePage","Boolean","location","hostname","match","initialState","action","users","indexOf","combineReducers","createStore","reducers","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a18bed07.chunk.js","sourcesContent":["const actionCreator = (type, payload) => {\r\n    return {\r\n        type: type,\r\n        payload: payload\r\n    }\r\n};\r\n\r\nexport default actionCreator;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport actionsCreator from '../../actionsCreator';\r\nimport {TRIGGER_LOGIN} from '../../constants';\r\nimport './loginPage.css'\r\n\r\nclass LoginPage extends React.Component {\r\n    state = {\r\n        username : \"\" ,\r\n        password : \"\"\r\n    }\r\n\r\n    submitFormHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.triggerLogin(this.state.username);\r\n        this.props.history.push(\"/chatwindow\");\r\n    }\r\n    inputChangeHandler = (event) => {\r\n        if(event.target.name === \"username\")\r\n            {\r\n                this.setState({\r\n                    username : event.target.value\r\n                })\r\n            }\r\n        else {\r\n                this.setState({\r\n                    password : event.target.value\r\n                })\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <div className = \"login-component container\">\r\n            <h1>Welcome To ChatBot</h1>\r\n                <form className=\"my-5 login-form text-left container w-50\" method=\"post\" onSubmit={this.submitFormHandler}>\r\n                    <h3 className=\"text-center\">Login</h3>\r\n                    <div className=\"form-group\">\r\n                        <label className=\"d-block\">User Name</label>\r\n                        <input className=\"d-block form-control\" name = \"username\" type=\"text\" placeholder=\"Enter username\" required value={this.state.username} onChange={this.inputChangeHandler}/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label className=\"d-block\">Password</label>\r\n                        <input className=\"d-block form-control\"name = \"password\" type=\"password\" placeholder=\"Enter password\" required value={this.state.password} onChange={this.inputChangeHandler}/> \r\n                    </div>\r\n                    <button className=\"btn-primary btn-lg btn-block form-control\">Sign In</button>             \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        triggerLogin : (username) => {\r\n            dispatch(actionsCreator(TRIGGER_LOGIN, username))\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(LoginPage);","export const TRIGGER_LOGIN = \"TRIGGER_LOGIN\";\r\nexport const CHAT_CONNECTED = \"CHAT_CONNECTED\";\r\nexport const CHAT_DISCONNECTED = \"CHAT_DISCONNECTED\";\r\nexport const CHAT_ERROR = \"CHAT_ERROR\";\r\nexport const ON_MESSAGE = \"ON_MESSAGE\";\r\n\r\n","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport actionCreator from '../../actionsCreator';\r\nimport {CHAT_CONNECTED, CHAT_DISCONNECTED, CHAT_ERROR, ON_MESSAGE} from \"../../constants\";\r\nimport \"./chatWindow.css\"\r\n\r\nclass ChatWindow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n        this.websocket = new WebSocket(\"wss://echo.websocket.org/\");\r\n        this.websocket.onopen = (evt) => { this.onOpen(evt) };\r\n        this.websocket.onclose = (evt) => { this.onClose(evt) };\r\n        this.websocket.onmessage = (evt) => { this.onMessage(evt) };\r\n        this.websocket.onerror = (evt) => { this.onError(evt) };\r\n    }\r\n    state = {\r\n        chat: \"\"\r\n    }\r\n\r\n    onMessage = (e) => {\r\n        this.props.addMessage({\r\n            username: this.props.chatBot,\r\n            chat: e.data\r\n        });\r\n    }\r\n\r\n    onOpen = (event) => {\r\n        // Connected\r\n        this.props.connectedWebSocket();\r\n    }\r\n\r\n    changeChatHandler = (e) => {\r\n        this.setState({\r\n            chat: e.target.value\r\n        })\r\n    }\r\n\r\n    submitChatHandler = (e) => {\r\n        e.preventDefault();\r\n        this.props.addMessage({\r\n            username: this.props.currentUser,\r\n            chat: this.state.chat\r\n        });\r\n        this.websocket.send(this.state.chat);\r\n\r\n    }\r\n    componentDidUpdate() {\r\n        window.scrollTo(0, document.body.scrollHeight || document.documentElement.scrollHeight);\r\n    }\r\n    backToLogin() {\r\n        window.history.back();\r\n    }\r\n    render () {\r\n        if(!this.props.connected) {\r\n            return <div>Loading</div>;\r\n        }\r\n        else if(this.props.error) {\r\n            return <div>Failed to Connect</div>;\r\n        }\r\n        else {\r\n            return (\r\n                <div className = \"chat-window container\">\r\n                    <div className=\"container\">\r\n                        {this.props.usersChat.map((singleChat, index) => {\r\n                            return (\r\n                                <div data-username = {singleChat.username} className ={singleChat.username === \"ChatBot\" ? \"text-left\" : \"text-right\"} key={singleChat.username + index}>\r\n                                    <span>{singleChat.username + \" : \"}</span>\r\n                                    <span>{singleChat.chat}</span>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    <div className=\"chat-box \">\r\n                    <form method=\"post\" className = \"d-flex\" onSubmit={this.submitChatHandler}>\r\n                        <input type=\"text d-block\" className =\"form-control\" name=\"chatText\" value={this.state.chat} required onChange={this.changeChatHandler} placeholder=\"Enter your message here\" />\r\n                        <button type=\"submit\" className = \"btn-secondary btn-lg ml-2\">Send</button>\r\n                        <div>\r\n                            <button onClick ={()=>{this.backToLogin()}} className = \"btn-primary mr-3 back-to-login\">Back To Login</button>\r\n                        </div>\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ...state.handleChat,\r\n        ...state.addUser\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        connectedWebSocket: () => {\r\n            dispatch(actionCreator(CHAT_CONNECTED))\r\n        },\r\n        disconnectedWebSocket: () => {\r\n            dispatch(actionCreator(CHAT_DISCONNECTED))\r\n        },\r\n        addMessage: (data) => {\r\n            dispatch(actionCreator(ON_MESSAGE, data))\r\n        },\r\n        onError: () => {\r\n            dispatch(actionCreator(CHAT_ERROR));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatWindow);\r\n","import React from 'react';\r\n\r\nclass Welcome extends React.Component {\r\n    componentDidMount() {\r\n        this.props.history.push(\"/login\");\r\n    }\r\n    render () {\r\n        return (<div> </div>)\r\n    }\r\n}\r\n\r\nexport default Welcome;","import React from 'react';\nimport './Routes.css';\nimport LoginPage from './components/loginPage/loginPage';\nimport ChatWindow from './components/chatWindow/chatWindow';\nimport WelcomePage from './components/welcomePage/welcomePage';\n\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom' ;\n\nconst Routes = ({ store }) => (\n    <Provider store={store}>\n      <Router>\n        <Switch>\n        <Route exact path=\"/\" component={WelcomePage} />\n        <Route exact path=\"/login\" component={LoginPage} />\n        <Route exact path=\"/chatwindow\" component={ChatWindow} />\n        </Switch>\n      </Router>\n    </Provider>\n  ) \nexport default Routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHAT_CONNECTED, CHAT_DISCONNECTED, CHAT_ERROR, ON_MESSAGE} from \"../constants\";\r\n\r\nconst initialState = {\r\n    usersChat : [],\r\n    connected: false,\r\n    chatBot: \"ChatBot\",\r\n    error: false\r\n}\r\n\r\nconst handleChat = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case CHAT_CONNECTED: {\r\n            return {\r\n                ...state,\r\n                connected: true\r\n            }\r\n        }\r\n        case CHAT_DISCONNECTED: {\r\n            return {\r\n                ...state,\r\n                connected: false\r\n            }\r\n        }\r\n        case CHAT_ERROR: {\r\n            return {\r\n                ...state,\r\n                error: true\r\n            }\r\n        }\r\n        case ON_MESSAGE: {\r\n            if(state.usersChat === []) {\r\n                return {\r\n                    ...state,\r\n                    usersChat: [\r\n                        {\r\n                            username: action.payload.username,\r\n                            chat: action.payload.chat\r\n                        }\r\n                    ]\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    usersChat: [...state.usersChat, action.payload]\r\n                }\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default handleChat;","import {TRIGGER_LOGIN } from \"../constants\";\r\n\r\nconst initialState = {\r\n    currentUser : \"\",\r\n    users : []\r\n};\r\n\r\nconst addUser = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case TRIGGER_LOGIN : { \r\n            return {\r\n                ...state,\r\n                currentUser: action.payload,\r\n                users: state.users.indexOf(action.payload) !== -1 ? [...state.users] : [...state.users, action.payload]\r\n            };\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default addUser;\r\n\r\n","import { combineReducers } from 'redux';\r\nimport handleChat from \"./handleChatReducers\";\r\nimport addUser from \"./addUserReducer\";\r\n\r\nexport default combineReducers({addUser, handleChat});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux' \nimport reducers from './reducers' \nconst store = createStore(reducers) \n\nReactDOM.render(<Routes store={store} />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}